#@author Sebastiaan te Molder

import re
import os
from pathlib import Path

#The name of the config file. Has to be in the same folder.
configfile: "config.yaml"

#Name and location of the reference genome file.
fullRefGenome = config["properties"]["outputFolder"]+"genome/fullRefGenome.fa"

#Name of the file the aligner will give
alignName = "unsorted.bam"
#Bam file still containing double alignments
unique = "unique.bam"
#Name of the alignment file after sorting, adding read groups, indexing and removing reads with mutliple alignments
finalBamstasy = "final.bam"
#Names of the files gotten from snp SNPCalling
cpgName = "cpg.raw.vcf"
snpName = "snp.raw.vcf"
#Log name for alignment and SNPCalling rule.
logName = "bashes.log"
#Threads to be allocated to tools (max of 4)
threads = config["properties"]["numOfThreads"]
#Folder to write temporary data to:
if config["properties"]["tempFolder"] is None:
    tempFolder = "/tmp/"
else:
    tempFolder = config["properties"]["tempFolder"]
# Name of file with benchmark statistics
benchmark = "stats.bnch"

# Location for the snp chip data (if available)
try:
    chippysnps = config["properties"]["snpChip"]
except:
    chippysnps = "nodata.vcf"

# Correct sequences found in the "seqs" folder. "_R1_" in the name signifies the first read, "_R2_" in the name signifies the second read. The read only gets included if both R1 and R2 are present.
reads = [str(x) for x in glob_wildcards(config["seqs"]+"{read}.fastq")[0] if (re.match("^(.(?!Pool))*_R1_.*",x) and x.replace("_R1_","_R2_") in glob_wildcards(config["seqs"]+"{read}.fastq")[0])]


'''
sam: the sam file to be converted
bam: the created bamfile
Return a string with an cmdline that will convert the sam file to a bam file and remove the samfile.
'''
def samToBam(sam,bam):
    return "samtools view -Sb "+ sam +" > "+ bam +"; rm "+ sam

#unused but kept
'''
in: pattern: the regex pattern a files needs to match to
in: path: The folder to be searched for the files
out: The files that matches the pattern
Gets a file that matches a regex pattern in a folder
'''
def getFileInFolder(pattern,path):
    files = []
    for file in os.listdir(path):
        if(re.compile(pattern).match(file) is not None):
            files.append(file)
    return files

"""
in: WvsC: String signifying the flags for "Watson" or "Crick"
out: A list with integers signifying the proper sam flags for Watson or Crick
Returns sam flags of reads found on either Watson or Crick strands
"""
def getFlags(WvsC):
    if(WvsC is "Watson"):
        return addBiExp([99,147,67,131],4,0x100)
    elif(WvsC is "Crick"):
        return addBiExp([83,163,115,179],4,0x100)
    else:
        raise ValueError('WvsC (%s) is not "Watson" or "Crick" ' % (WvsC))

"""
in: flags: Flags which are the base of the desired flags
in: times: The flags that are desired above the base Flags
in: start: The first flag to be added to the base Flags
out: List of integers that are still possible with the base Flags
Mostly used for methylExtract and its need to know the Watson and Crick strand.
Basically, if you have a flag, 83, that is a Watson strand and you want all the
flags that are still possible above that, this is what you get. It is very specific.
tl;dr: You will never need this. Me be bad programmer, very bad.
"""
def addBiExp(flags,times,start):
    addedFlags = flags.copy()
    for flag in flags:
        for x in range(times):
            addedFlags.append(flag+int(start)*2**x)
    return addedFlags



# Dictionary of the alignment and SNPCalling tools. The aligners are split up into the build command and the align command. Build Builds the reference index and align aligns the reads to the reference genomeself.
# SNPCalling contains the various snpcallersself.
# The values are the commands required to run the tool correctly.

build = "Build"
align = "Align"
Tools = {
    "Alignment":{
        "bismark": {
            build : "bismark_genome_preparation "+fullRefGenome.rsplit("/",1)[0],
            align : "bismark --genome "+fullRefGenome.rsplit("/",1)[0]+" -1 #r1# -2 #r2# --multicore "+str(threads)+" -p "+str(threads)+" --temp_dir "+ tempFolder +" -o #out#"
        },
        "bs-seeker2": {
            build: "bs_seeker2-build.py -f "+fullRefGenome+" --aligner=bowtie2",
            align: "bs_seeker2-align.py -g "+fullRefGenome+" -1 #r1# -2 #r2# -f bam --aligner=bowtie2 -o #out#unordered"+alignName+" --bt2--end-to-end --temp_dir="+tempFolder+" --bt2-p "+str(threads)+"; picard ReorderSam I=#out#unordered"+alignName+" O=#out#"+alignName+" R="+fullRefGenome+"; rm #out#unordered"+alignName
        },
        "segemehl": {
            build: "segemehl.x -x #out#index.idx -d "+fullRefGenome,
            align: "segemehl.x --threads "+str(threads)+" -i #out#index.idx -d "+fullRefGenome+" -q #r1# -p #r2# > #out#"+alignName
        },
        "bwa-meth": {
            build: "bwameth.py index "+fullRefGenome,
            align: "bwameth.py --threads "+str(threads)+" --reference "+fullRefGenome+" #r1# #r2# > #out#"+alignName
        },
        "bsmap": {
            build: "true",
            align: "bsmap -a #r1# -b #r2# -d "+fullRefGenome+" -o #out#"+alignName+" -p "+str(threads)
        }#,
        #"walt":{
        #    build: "mkdir #out#index/;"+config["properties"]["installFolder"]+"walt/bin/makedb -c "+fullRefGenome+" -o #out#index/fullRefGenome.dbindex",
        #    align: config["properties"]["installFolder"]+"walt/bin/walt -i #out#index/fullRefGenome.dbindex -t "+ str(threads) +" -1 #r1# -2 #r2# -o #out#"+alignName
        #},
        #"gsnap" : {
        #    build: "gmap_build -C -d ourUnknownHero "+fullRefGenome+" && cmetindex -d ourUnknownHero",
        #    align: "gsnap -d ourUnknownHero --mode=cmet-nonstranded #r1# #r2# -t "+str(threads)+" -A sam -o #out#temp.sam; "+samToBam("#out#temp.sam","#out#"+alignName)
        #},
        #"bratnova" :{
        #    build: "(mkdir #out#index/ || true) && echo " + fullRefGenome + " > #out#index/ref.txt && "+config["properties"]["installFolder"]+"brat_nova/build_bw -P #out#index/ -r #out#index/ref.txt",
        #    align: config["properties"]["installFolder"]+"brat_nova/trim -1 #r1# -2 #r2# -P #out# -q 0 -L 0 -m 0; "+config["properties"]["installFolder"]+"brat_nova/brat_bw -P #out#index/ -pebs -1 #out#_pair1.fastq -2 #out#_pair2.fastq -o #out#temp.sam; "+samToBam("#out#temp.sam","#out#"+alignName)
        #}
    }
  ,"SNPCalling": {
    "bis-snp": "bis-snp -T BisulfiteGenotyper -Xmx32g -nt "+str(threads)+" -I #input#"+finalBamstasy+" -vfn1 #out#"+cpgName+" -vfn2 #out#"+snpName+" -R "+fullRefGenome +" --defaultBaseQualities 40",
    #"methylExtract" : "MethylExtract.pl seq="+fullRefGenome+" inDir=#input# outDir=#out# flagW="+",".join([str(x) for x in getFlags("Watson")])+" flagC="+",".join([str(x) for x in getFlags("Crick")])+" p="+str(threads)+" chromSplitted=N ",
    "BS-Snper": "perl " +config["properties"]["installFolder"] + "BS-snper/BS-Snper.pl --fa "+fullRefGenome+" --input #input#"+finalBamstasy+" --output #out#resultBSSnper.vcf --methcg #out#methcg.tsv --methchg #out#methchg.tsv --methchh #out#methchh.tsv --minhetfreq 0.1 --minhomfreq 0.85 --minquali 15 --mincover 10 --maxcover 1000 --minread2 2 --errorate 0.02 --mapvalue 20 > #out#"+snpName,
    #"biscuit" : config["properties"]["installFolder"] + "biscuit/biscuit pileup -q "+str(threads)+" "+fullRefGenome+" #input#"+finalBamstasy+" -o #out#"+snpName

    }
}


#Creates two dictionaries used to dictate the folder hierarchy in case the option all is chosen. This is where all the folder locations are specifipaduzzled.
#Should be a function.. I suppose...
if str(config["properties"]["alignmentTool"]) == "All":
    alOut = {aligner: config["properties"]["outputFolder"] + aligner + "/" for aligner in Tools["Alignment"].keys()}
    if str(config["properties"]["snpCallingTool"]) == "All":
        snpOut = {}
        for aligner in alOut:
            for snper in Tools["SNPCalling"].keys():
                snpOut.update({aligner.replace(",","")+","+snper.replace(",",""): config["properties"]["outputFolder"]+aligner+"/"+snper+"/"})
else:
    alOut = {config["properties"]["alignmentTool"]: config["properties"]["outputFolder"] + config["properties"]["alignmentTool"]+"/"}
    if str(config["properties"]["snpCallingTool"]) == "All":
        snpOut = {config["properties"]["alignmentTool"].replace(",","") + "," + snper.replace(",","") :config["properties"]["outputFolder"] + config["properties"]["alignmentTool"] + snper + "/" for snper in Tools["SNPCalling"].keys() }
    else:
        snpOut = {config["properties"]["alignmentTool"].replace(",","")+ "," +config["properties"]["snpCallingTool"].replace(",",""): config["properties"]["outputFolder"] + config["properties"]["alignmentTool"]+"/"+config["properties"]["snpCallingTool"]+"/"}



'''
Alters a string on predefined locations specified by two #.
input:  cmdLine, the string to be altered
        out, The string to be inserted into cmdLine
        input, optional second string to be inserted into cmdline
output: The altered cmdLine
'''
#This is... Hey look over there, some ... Great Tits?!
def setFolders(cmdLine, out, input = None, r1 = None, r2 = None):
    dict = locals()
    for key in dict.keys():
        if(dict[key] is not None and key != "cmdLine"):
            cmdLine = cmdLine.replace("#"+key+"#", dict[key])
    return cmdLine



'''
Ambitious function to call tool without making a string for each tool. It failed.. miserably.
def callTool(cmdLine, refGenome = None, refGenomeFolder = None, seqs = None, threads = None, alOut = None, snpOut = None):
    args = ["\{refGenome\}", "\{refGenomeFolder\}","\{threads\}", "\{alOut\}", "\{snpOut\}"]
    for seq in range(1,len(seqs)+1):
        args.append("\{seq"+seq+"\}")
    for arg in args:
        if
        cmdLine.replace(arg, )
'''




#Gotta rule 'm all.
rule all:
    input:
        expand("{snpOut}{read1}/snps.called",\
        snpOut = list(snpOut.values()),\
        read1 = reads)
    shell:
        "rm -r "+tempFolder+"bs_seeker2* || true"

'''
rule fastQCheck:
    input:
        lambda wildcards: config["seqs"][wildcards.seq]
    output:
        expand("{snpOut}fastqCReports/{seq}/*", snpOut = list(snpOut.values()), seq = config["seqs"])
    threads: 8
    run:
        "fastqc -o ../fastqCReports/{seq} -t 8 {input}"
'''

# Creates a single reference genome file from a potential multitude of them and removes all \r
rule fullRefGenomeMake:
    input: config["properties"]["refGenome"]
    output: fullRefGenome
    shell: "cat {input}*.fa | sed -e 's/\\r//g' >{output}"

#Creates an index from the reference genome
rule refIndex:
    input: "{fasta}.fa"
    output: "{fasta}.fa.fai"
    shell: "samtools faidx {input} -o {output}"

#Creates a dictionary of the contigs of the reference genome
rule refDict:
    input: "{fasta}.fa"
    output: "{fasta}.dict"
    shell: "samtools dict {input} -o {output}"

#Builds an index of the reference genome for a specific aligner. Calls the build part in the tools dictionary.
rule buildAlignmentIndex:
    input:
        fullRefGenome,
        fullRefGenome.rsplit(".",1)[0]+".dict",
        fullRefGenome+".fai"
    output:
        config["properties"]["outputFolder"]+"{build}/built.stuff"
    log:
        config["properties"]["outputFolder"]+"{build}/build.log"
    params:
        spBlOut = lambda wildcards: alOut[wildcards.build],
        cmd = lambda wildcards: setFolders(cmdLine = Tools["Alignment"][wildcards.build][build],out = alOut[wildcards.build])
    benchmark:
        config["properties"]["outputFolder"]+"{build}/build.bnch"
    shell:
        "rm -r {params.spBlOut}* || true ; {params.cmd} 2> {log} && touch {params.spBlOut}built.stuff"

#Aligns the r1 and r2 given in the config file to the reference genome. Calls the align part in the tools dictionary
rule align:
    input:
        #glob_wildcards(config["properties"]["outputFolder"]+"reports/"+wildcards.type+"/{tool}.bnch")[0]
        config["properties"]["refGenome"],
        fullRefGenome,
        lambda wildcards: config["properties"]["outputFolder"]+wildcards.align+"/"+"built.stuff",
        #lambda wildcards: print(wildcards.read1),
        r1 = lambda wildcards: config["seqs"]+wildcards.read1+".fastq",
        r2 = lambda wildcards: config["seqs"]+wildcards.read1.replace("_R1_","_R2_")+".fastq"
    output:
        config["properties"]["outputFolder"]+"{align}/{read1}/"+alignName
        #log = config["properties"]["outputFolder"]+"{align}/"+logName
    log:
        temp(config["properties"]["outputFolder"]+"{align}/{read1}/"+logName)
    benchmark:
        config["properties"]["outputFolder"]+"{align, [^/]*}/{read1}/align"+benchmark
    threads: threads
    priority: 1
    params:
        spAlOut = lambda wildcards: alOut[wildcards.align],
        cmd = lambda wildcards,input: setFolders(cmdLine = Tools["Alignment"][wildcards.align][align],out = alOut[wildcards.align], r1=input.r1, r2=input.r2)
    shell:
        #for aligner in alOut.keys():
        "rm -r {params.spAlOut}*.bam || rm -r {params.spAlOut}*.sam || true ; ({params.cmd}) 2> {log}; mv {params.spAlOut}*.bam {params.spAlOut}{wildcards.read1}/"+alignName+" || true"

#Adds dummy read groups to the bam file resulted from the align rule. Then sorts and indexes the bam file.
rule makeSNPCallReady:
    input:
        file = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.read1+"/"+alignName,
        ref = fullRefGenome
    output:
        final = config["properties"]["outputFolder"]+"{aligner}/{read1}/"+finalBamstasy
    priority: 2
    shell:
        "picard AddOrReplaceReadGroups -Xmx16g I=<(samtools view -h -f 3 {input.file}) O={output.final} SORT_ORDER=coordinate CREATE_INDEX=true RGID=ID:H0164.2 RGPL=illumina RGPU=H0164ALXX140820.2 RGLB=Solexa-272222 RGSM=theBestSample"

#Calls snps of a sorted, indiced and read grouped bam file. Calls the SNPCalling part of the tools dictionary.
rule callSNPs:
    input:
        lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.read1+"/"+finalBamstasy,
        fullRefGenome,
        config["properties"]["refGenome"],
        fullRefGenome.rsplit(".",1)[0]+".dict",
        fullRefGenome+".fai"
    output:
        config["properties"]["outputFolder"]+"{aligner}/{snper}/{read1}/snps.called"
    log:
        config["properties"]["outputFolder"]+"{aligner}/{snper}/{read1}/"+logName
    benchmark:
        config["properties"]["outputFolder"]+"{aligner}/{snper}/{read1}/snp"+benchmark
    threads: threads
    priority: 4
    params:
        cmd = lambda wildcards: setFolders(cmdLine = Tools["SNPCalling"][wildcards.snper], out = snpOut[wildcards.aligner+","+wildcards.snper]+wildcards.read1+"/", input = alOut[wildcards.aligner]+wildcards.read1+"/")
    shell:
        "{params.cmd} 2> {log} && touch {output}"
        #"echo \"hello again\" > {snpOut}{snpName} & echo \"hello again and again\" > {snpOut}{cpgName}"


#Makes report on CPU clock time and memory alloction
rule report:
    input:
        lambda wildcards: expand(config["properties"]["outputFolder"]+wildcards.type+"/{tool}.bnch", tool = glob_wildcards(config["properties"]["outputFolder"]+wildcards.type+"/{tool}.bnch")[0])
    output:
        config["properties"]["outputFolder"]+"{type}/endReport/final.end"
    shell:
        "cat {input} | awk 'NR==1{print \"\t\t\" $0}'> {output}; for f in {input} ; do awk 'NR!=1{print ARGV[1]  \"\t\" $0}' $f >> {output} ; done;"

# Let them eat cake. Removes all ids that were found on reads that have secondary alignments.
rule removeUnuniqueReads:
    input:
        bam = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.read1+"/"+alignName
    output:
        temp = temp(config["properties"]["outputFolder"]+"{aligner}/{read1}/temp.bam"),
        uIDs = temp(config["properties"]["outputFolder"]+"{aligner}/{read1}/ununiqueids.sam"),
        uu = temp(config["properties"]["outputFolder"]+"{aligner}/{read1}/ununique.sam"),
        u = temp(config["properties"]["outputFolder"]+"{aligner}/{read1}/"+unique)
    priority: 3
    shell:
        "samtools view -f 3 -Sb {input.bam} > {output.temp} ;\
        awk -F '\\t' '{{print $1}}' <(samtools view -f 0x100 {output.temp}) > {output.uIDs} ; if ((\" $(wc -l <{output.uIDs}) > 0 \")); \
        then grep -Fwf {output.uIDs} <(samtools view {output.temp}) > {output.uu} ;\
        grep -Fvxf {output.uu} <(samtools view -h {output.temp}) | samtools view -Sb - > {output.u}; \
        else touch {output.uu} && cp {output.temp} {output.u}; fi"

addedInfo = "allInfo.bnch"

# Removes all reads with the id found in a read with a secondary alignment flag. Generates only the reads that are uniquely mapped.
rule uniqueReadsCount:
    input:
        bam = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.read+"/"+unique,
        bench = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.read+"/align"+benchmark
    output:
        config["properties"]["outputFolder"]+"{aligner}/{read}/alignnoTotnoFASTQ"+addedInfo
    params:
        tmp = temp(config["properties"]["outputFolder"]+"{aligner}/{read}/tmp.bnch")
    shell:
        "printf \"unique_reads\\n\" > {params.tmp};\
        samtools view -c {input.bam} >> {params.tmp} \
        && paste {input.bench} {params.tmp} > {output} ;"

#Counts the total amount of reads in the FASTQ and adds it to the benchmark
rule totalFastQReads:
    input:
        fastq = lambda wildcards: config["seqs"]+wildcards.read+".fastq",
        bench = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.read+"/alignnoTotnoFASTQ"+addedInfo
    output:
        temp(config["properties"]["outputFolder"]+"{aligner}/{read}/alignnoTot"+addedInfo)
    params:
        tmp = temp(config["properties"]["outputFolder"]+"{aligner}/{read}/tmp.bnch")
    shell:
        "printf \"TotFastqReads\\n\" > {params.tmp};\
        printf $(calc \"$(cat {input.fastq} | grep \"^@\" | wc -l ) * 2\") >> {params.tmp}\
        && paste {input.bench} {params.tmp} > {output} ;"

#Returns all the SNPs found in a vcf file from a snp calling tool also found in the SNPchip vcf file.
rule SNPSInCommonWithSNPChip:
    input:
        testSNPs = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.snper+"/"+wildcards.read+"/"+snpName,
        SNPChip = chippysnps,
        bench = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.snper+"/"+wildcards.read+"/snp"+benchmark
    output:
        config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/commons"+addedInfo
    params:
        tmp = temp(config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/tmp.bnch")
    shell:
        "printf \"common_SNPs_SNPChip\\n\" > {params.tmp}; comm -12 <(awk -F '\\t' '/^[^#]/ {{if (tolower(substr($1,1,3))==\"chr\") $1=substr($1,4); print $1,$2,$4,$5}}' {input.testSNPs} | sort) <(awk -F '\\t' '/^[^#]/ {{if (tolower(substr($1,1,3))==\"chr\") $1=substr($1,4); print $1,$2,$4,$5}}' {input.SNPChip} | sort) | wc -l >> {params.tmp} && paste {input.bench} {params.tmp} > {output};"

#Adds total number of snps
rule getAmountOfSNPs:
    input:
        testSNPs = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.snper+"/"+wildcards.read+"/"+snpName,
        bench = config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/commonsKinds"+addedInfo
    output:
        config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/snp"+addedInfo
    params:
        tmp = temp(config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/tmp.bnch")
    shell:
        "printf \"totalSNPsCalled\\n\" > {params.tmp}; printf $(wc -l {input.testSNPs}) >> {params.tmp}; paste {input.bench} {params.tmp} > {output};"

rule getKindsOfSNPs:
    input:
        testSNPs = lambda wildcards: config["properties"]["outputFolder"]+wildcards.aligner+"/"+wildcards.snper+"/"+wildcards.read+"/"+snpName,
        bench = config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/commons"+addedInfo
    output:
        config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/commonsKinds"+addedInfo
    params:
        tmp = temp(config["properties"]["outputFolder"]+"{aligner}/{snper}/{read}/tmp.bnch")
    shell:
        "awk -F '\\t' '/^[^#]/ {{\
        kindsOfSNPs[$4\">\"$5]++}};\
        END{{ for(key in kindsOfSNPs){{print key \"\\t\" kindsOfSNPs[key]}}}}' \
        {input.testSNPs} | awk -F '\\t' '$1 !~ /,/' | \
        sort -t\\t -k1 | \
        awk -F '\\t' 'NR == 1 {{for (i=1;i<=NF;i++){{row[i] = $i}}}}{{for(i=1;i<=NF;i++){{row[i] = row[i] \"\\t\" $i}}}};\
        END{{for(i=1;i<=NF;i++){{print row[i]}}}}' \
        | paste {input.bench} - > {output}"
#awk -F '\t' '/^[^#]/ {kindsOfSNPs[$4">"$5]++};END{ {for(key in kindsOfSNPs){print key ": " kindsOfSNPs[key]}}}'  snp.raw.vcf

#Adds total number of aligns
rule getAmountOfAlignments:
    input:
        testAlign = config["properties"]["outputFolder"]+"{aligner}/{read}/"+alignName,
        bench = config["properties"]["outputFolder"]+"{aligner}/{read}/alignnoTot"+addedInfo
    output:
        config["properties"]["outputFolder"]+"{aligner}/{read}/align"+addedInfo
    params:
        tmp = temp(config["properties"]["outputFolder"]+"{aligner}/{read}/tmp.bnch")
    shell:
        "printf \"totalAlignments\\n\" > {params.tmp}; printf $(samtools view -c {input.testAlign}) >> {params.tmp}; paste {input.bench} {params.tmp} > {output};"

#Generate list of benchmarks
def benchmarkees():
    theBenchmarked = []
    for aligner in Tools["Alignment"].keys():
        theBenchmarked.append(config["properties"]["outputFolder"]+aligner+"/alignAVGS.bnch")
        for snper in Tools["SNPCalling"].keys():
            theBenchmarked.append(config["properties"]["outputFolder"]+aligner+"/"+snper+"/snpAVGS.bnch")
    return theBenchmarked

rule allAverages:
    input: benchmarkees() #expand([x.resolve() for x in list(Path(config["properties"]["outputFolder"]).glob('**/uniqueReads.bnch'))])


#Gets the average of stats from all the reads for a tool
rule getAverages:
    input:
        lambda wildcards: expand(config["properties"]["outputFolder"]+wildcards.type+"/{read}/"+wildcards.kind+addedInfo, read = glob_wildcards(config["properties"]["outputFolder"]+wildcards.type+"/{read}/"+wildcards.kind+benchmark)[0])
        #expand(config["properties"]["outputFolder"]+"{type}/{read}/"+benchmark, read = glob_wildcards(config["properties"]["outputFolder"]+"{type}/{read}/"+benchmark)[0], type = [[]])
        #expand([x.resolve() for x in list(Path(config["properties"]["outputFolder"]).glob('**/uniqueReads.bnch'))])
    output:
        temp(config["properties"]["outputFolder"]+"{type}/{kind}AVGS.bnch")
    shell:
        "cat {input} | awk '$1 != \"s\" || NR==1' | sed 's/\~//g' | sed 's/. day, //g' | tr ' ' '\\t' | sed 's/\\t\+/\\t/g' | awk -F '\\t' '{{\
            if(NR==1) print $0;\
            for (i=1; i <= NF ; i++)\
                {{a[i] += $i; b[i]++;}}\
            }}; END {{for(i=1;i<= NF;i++)\
                {{printf \"%s\\t\", a[i]/(b[i]-1);}} printf \"\\n\"\
        }}' > {output}"

#adds toolname to the stats
rule addNameOfToolToResult:
    input:
        config['properties']['outputFolder']+"{type}/{kind}AVGS.bnch"
    output:
        config['properties']['outputFolder']+"{type}/{kind}AVGSNamed.bnch"
    shell:
        "paste <(printf \"name\\n{wildcards.type}\") {input} > {output}"


def typing(kind):
    if kind == "align":
        return [x for x in Tools["Alignment"].keys()]
    elif kind == "snp":
        return [y+"/"+x for y in Tools["Alignment"].keys() for x in Tools["SNPCalling"].keys()]
    else:
        raise ValueError(kind + " is neither 'align' or 'snp'")

#Puts all the stats of the aligners into one file
rule collectDataIntoOneFile:
    input:
        lambda wildcards: expand(config["properties"]["outputFolder"]+"{type}/"+wildcards.kind+"AVGSNamed.bnch",type = typing(wildcards.kind))
    output:
        config["properties"]["outputFolder"]+"{kind}finalAVGS.bnch"
    shell:
        "cat {input} | awk 'NR%2==0 || NR==1' > {output}"


# Generates histograms comparing the averages between te tools.
rule generateDiagrams:
    input:
        rScript = "simpleHisto.R",
        inputFile = config["properties"]["outputFolder"]+"{kind}finalAVGS.bnch"
    output:
        config["properties"]["outputFolder"]+"reports/{kind}/final.done"
    params: outputFolder = config["properties"]["outputFolder"]+"reports/{kind}/"
    shell:
        "Rscript {input.rScript} {input.inputFile} {params.outputFolder} && touch {output}"

#rinbeets, I never feel like checking it out, but I insist I will one day.
